- name: Retrieve NGINX image
  docker_image:
    name: "nginx:{{ nginx_version }}"
    state: present

- name: Check for NGINX network
  shell: "docker network ls --filter name=nginx | xargs test -z"
  register: nginx_network_exists
  ignore_errors: True

# We have to do it this way because Ansible does not support passing
# --attachable or --scope when creating a Docker network.
- name: Create NGINX Network
  shell: "docker network create --driver overlay --attachable --scope swarm nginx"
  when: not nginx_network_exists

- name: Create NGINX site config dir
  file:
    path: /usr/local/nginxproxy/sites
    state: directory
    recurse: yes

- name: Create NGINX path config dir
  file:
    path: /usr/local/nginxproxy/locations
    state: directory
    recurse: yes

- name: Create NGINX generic config dir
  file:
    path: /usr/local/nginxproxy/conf.d
    state: directory
    recurse: yes

- name: Create NGINX SSL cert dir
  file:
    path: /usr/local/nginxproxy/ssl
    state: directory
    recurse: yes

- name: Create NGINX acme challenge dir
  file:
    path: /usr/local/nginxproxy/acme-challenge
    state: directory
    recurse: yes

- name: Copy NGINX config file
  synchronize:
    src: nginxproxy/nginx.conf
    dest: /usr/local/nginxproxy/nginx.conf

- name: Start NGINX Proxy
  docker_container:
    name: nginxproxy
    image: "nginx:{{ nginx_version }}"
    restart_policy: always
    state: started
    networks:
      - name: "bridge"
      - name: "nginx"
    published_ports: "{{ nginx_proxy_binds }}"
    volumes:
      - "/usr/local/nginxproxy/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "/usr/local/nginxproxy/conf.d:/etc/nginx/conf.d:ro"
      - "/usr/local/nginxproxy/acme-challenge:/tmp/acme-challenge:ro"
      - "/usr/local/nginxproxy/sites:/etc/nginx/sites-enabled:ro"
      - "/usr/local/nginxproxy/locations:/etc/nginx/locations:ro"
      - "/usr/local/nginxproxy/ssl:/etc/letsencrypt:ro"
      - "/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro"

- name: Configure cron
  cron:
    name: "Reload nginx config"
    minute: "{{ nginx_config_reload_minute_interval }}"
    user: "{{ ansible_user }}"
    job: "docker exec nginxproxy bash -c 'nginx -t && nginx -s reload' &> /dev/null"
